#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.1
#  in conjunction with Tcl version 8.6
#    Feb 06, 2022 09:16:58 PM +04  platform: Windows NT

import sys
from telnetlib import IP
from threading import Thread
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
from tkinter import ttk

import PicPcControl
import RocketControlGui
import CenterConnect
import CenterSystem
import ThreadConnect

def main(*args):

    global root
    root = tk.Tk()
    root.protocol( 'WM_DELETE_WINDOW' , root.destroy)
    root.iconbitmap('Logo\\SunSpaceLogo.ico')

    # Creates a toplevel widget.
    global _top7, _w7
    _top7 = root
    _w7 = RocketControlGui.CenterConnect(_top7)
    
    inner = Inner(_top7, _w7)
    


    _top7.bind("<Return>", inner.Connect)

    root.mainloop()

if __name__ == '__main__':
    RocketControlGui.start_up()

class Inner:
    def __init__(self, root, root_inner) -> None:
        self.root = root
        self.root_inner = root_inner

        self.CCS = None
        self.PICPC = None

    #
    def Connect(self, event):
        
        #try:
            self.CCS = CenterConnect.ConnectSetting(ConnectName=str(self.root_inner.ConName.get()), IP=str(self.root_inner.ConIP.get()), RPCPort=str(self.root_inner.RPCPort.get()), Port=str(self.root_inner.SPort.get()), Protocol=0)
            self.root_inner.ServerStatus.config(text=str(self.CCS.ConnectName.krpc.get_status()))
            self.RocketControl()
        #except:
            print("NOT CONNECT")
        
    def RocketControl(self):
        # Creates a toplevel widget.
        global _top1, _w1
        _top1 = tk.Toplevel(self.root)
        _w1 = RocketControlGui.Toplevel1(_top1)
        
        _w1.DisconnectButton.bind("<Button-1>", self.Disconnect)
        #_w1.SetPicPcControl.bind("<Button-1>", self.PicPc)
        _w1.reflesh.bind("<Button-1>", self.RefleshVessels)
        _w1.SetPicPcControl.bind("<Button-1>", self.PicPc)

        self.CenterSystem = CenterSystem.CenterSystem(self.CCS, _w1, _top1)
        
        self.CenterSystem.getVessels()
    
    #event
    def Disconnect(self, event):
        self.CenterSystem.CS_Disconnect()

    def RefleshVessels(self, event):
        self.CenterSystem.getVessels()

    def t(self):
        print("Okeybaby")
    
    def show_menu_(self, event):
        self.menu.tk_popup(event.x+1100, event.y+387)

    def PicPc(self, event):
        # Creates a toplevel widget.
        if str(self.CCS.ConnectName.space_center.active_vessel.comms.signal_strength) != "0.0":
           # if self.CenterSystem.ConnectEvent == True:
                
                global _top5, _w5
                _top5 = tk.Toplevel(self.root)
                
                _w5 = RocketControlGui.SetControlPicPc(_top5)
                
                self.menu = tk.Menu(_top5)
                self.menu.add_command(label="Rename", command=self.t)
                self.menu.add_command(label="OFF\\ON", command=self.t)
                self.menu.add_command(label="PartInfo", command=self.t)
                self.menu.add_separator()
                self.menu.add_command(label="Select All", command=self.t)
                self.menu.add_separator()
                
                #_w5.Scrolledtreeview1.insert('0','item0',text="dfdfdf")
                #_w5.Scrolledtreeview1.insert('end',"df")
                #_w5.RocketPartTree .heading('#0', text='Directory Structure', anchor=W)
                #_w5.RocketPartTree.heading('size', text='File Size', anchor=W)
                #_w5.RocketPartTree.column('size', stretch=0, width=70)

                self.PICPC = PicPcControl.PicPcControl(self.CCS, self.CCS.ConnectName.space_center.active_vessel,  _w5, _top5, _w5, self)
                
                _w5.Scrolledtreeview1.bind("<Button-3>",self.show_menu_)

                
                self.RocketPart = PicPcControl.VesselInfoConnect("Rocket Part Info", self.PICPC, 0)

                

                self.OrbitInfoAP = PicPcControl.VesselInfoConnect("Orbit Info AP ", self.PICPC, 0)
                self.OrbitInfo = PicPcControl.VesselInfoConnect("Orbit Info", self.PICPC, 0)
                self.Altitude = PicPcControl.VesselInfoConnect("Altitude Info ", self.PICPC, 0)
                self.Speed = PicPcControl.VesselInfoConnect("Speed Info ", self.PICPC, 0)
                self.Resources = PicPcControl.VesselInfoConnect("Resources Info ", self.PICPC, 0)
                self.Signal = PicPcControl.VesselInfoConnect("Signal Info", self.PICPC, 0)

                self.PICPC.root.OrbitalSelectedValue.bind("<<ComboboxSelected>>", self.OrbitInfo.callback)
            
                try:
                    self.ACV_PIC_PC_PART_INFO = ThreadConnect.Connect(self.RocketPart.RocketGetPart, (""))
                    self.ACV_PIC_PC_PART_INFO.Run()
                    
                    self.ACV_PIC_PC_ORBIT_AP = ThreadConnect.Connect(self.OrbitInfoAP.OrbitInfoAP, (""))
                    self.ACV_PIC_PC_ORBIT_AP.Run()

                    self.ACV_PIC_PC_ORBIT = ThreadConnect.Connect(self.OrbitInfo.OrbitInfo, (""))
                    self.ACV_PIC_PC_ORBIT.Run()

                    self.ACV_PIC_PC_ALTITUDE = ThreadConnect.Connect(self.Altitude.Altitude, (""))
                    self.ACV_PIC_PC_ALTITUDE.Run()

                    self.ACV_PIC_PC_SPEED = ThreadConnect.Connect(self.Speed.Spped, (""))
                    self.ACV_PIC_PC_SPEED.Run()

                    self.ACV_PIC_PC_RESOURCES = ThreadConnect.Connect(self.Resources.Resources, (""))
                    self.ACV_PIC_PC_RESOURCES.Run()

                    self.ACV_PIC_PC_SIGNAL = ThreadConnect.Connect(self.Signal.ConnectSignal, (""))
                    self.ACV_PIC_PC_SIGNAL.Run()
                    
                except:
                    print("NO CONNECT >> PICPC ")
        else:
            print("NO SIGNAL PICPC INNER ERROR")
    
    def INFOCONCLOSE(self):
        self.OrbitInfo.DisconnectAV()
        self.OrbitInfo.DisconnectAV()
        self.Signal.DisconnectAV()
        self.Altitude.DisconnectAV()
        self.Speed.DisconnectAV()
        self.Resources.DisconnectAV()


