#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.1
#  in conjunction with Tcl version 8.6
#    Mar 02, 2022 11:01:01 PM +04  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

import RocketControlGui_support

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1327x777+49+40")
        top.minsize(120, 1)
        top.maxsize(3290, 1061)
        top.resizable(0,  0)
        top.title("SunSpace KSP Rocket Control System")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top

        self.Listbox1 = tk.Listbox(self.top)
        self.Listbox1.place(x=0, y=50, height=715, width=913)
        self.Listbox1.configure(background="white")
        self.Listbox1.configure(cursor="arrow")
        self.Listbox1.configure(disabledforeground="#a3a3a3")
        self.Listbox1.configure(font="TkFixedFont")
        self.Listbox1.configure(foreground="#000000")
        self.Listbox1.configure(highlightbackground="#d9d9d9")
        self.Listbox1.configure(highlightcolor="black")
        self.Listbox1.configure(selectbackground="blue")
        self.Listbox1.configure(selectforeground="white")

        self.Label2 = tk.Label(self.top)
        self.Label2.place(x=0, y=17, height=37, width=139)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(anchor='w')
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(compound='left')
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''All Vessels''')

        self.TFrame1 = ttk.Frame(self.top)
        self.TFrame1.place(x=921, y=69, height=552, width=394)
        self.TFrame1.configure(relief='groove')
        self.TFrame1.configure(borderwidth="2")
        self.TFrame1.configure(relief="groove")

        self.CommSignalStatus = tk.Label(self.TFrame1)
        self.CommSignalStatus.place(x=10, y=50, height=30, width=363)
        self.CommSignalStatus.configure(activebackground="#f9f9f9")
        self.CommSignalStatus.configure(activeforeground="black")
        self.CommSignalStatus.configure(anchor='w')
        self.CommSignalStatus.configure(background="#d9d9d9")
        self.CommSignalStatus.configure(compound='left')
        self.CommSignalStatus.configure(cursor="arrow")
        self.CommSignalStatus.configure(disabledforeground="#a3a3a3")
        self.CommSignalStatus.configure(foreground="#000000")
        self.CommSignalStatus.configure(highlightbackground="#d9d9d9")
        self.CommSignalStatus.configure(highlightcolor="black")
        self.CommSignalStatus.configure(text='''none''')

        self.VesselType = tk.Label(self.TFrame1)
        self.VesselType.place(x=10, y=80, height=31, width=363)
        self.VesselType.configure(activebackground="#f9f9f9")
        self.VesselType.configure(activeforeground="black")
        self.VesselType.configure(anchor='w')
        self.VesselType.configure(background="#d9d9d9")
        self.VesselType.configure(compound='left')
        self.VesselType.configure(cursor="arrow")
        self.VesselType.configure(disabledforeground="#a3a3a3")
        self.VesselType.configure(foreground="#000000")
        self.VesselType.configure(highlightbackground="#d9d9d9")
        self.VesselType.configure(highlightcolor="black")
        self.VesselType.configure(text='''none''')

        self.vesselname = tk.Label(self.TFrame1)
        self.vesselname.place(x=10, y=20, height=21, width=374)
        self.vesselname.configure(activebackground="#f9f9f9")
        self.vesselname.configure(activeforeground="black")
        self.vesselname.configure(anchor='w')
        self.vesselname.configure(background="#d9d9d9")
        self.vesselname.configure(compound='left')
        self.vesselname.configure(cursor="arrow")
        self.vesselname.configure(disabledforeground="#a3a3a3")
        self.vesselname.configure(foreground="#000000")
        self.vesselname.configure(highlightbackground="#d9d9d9")
        self.vesselname.configure(highlightcolor="black")
        self.vesselname.configure(text='''none''')

        self.Label3 = tk.Label(self.top)
        self.Label3.place(x=921, y=17, height=37, width=393)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(anchor='w')
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(compound='left')
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Select Vessel Status''')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.reflesh = tk.Button(self.top)
        self.reflesh.place(x=1261, y=740, height=24, width=56)
        self.reflesh.configure(activebackground="#ececec")
        self.reflesh.configure(activeforeground="#000000")
        self.reflesh.configure(background="#d9d9d9")
        self.reflesh.configure(compound='left')
        self.reflesh.configure(cursor="arrow")
        self.reflesh.configure(disabledforeground="#a3a3a3")
        self.reflesh.configure(foreground="#000000")
        self.reflesh.configure(highlightbackground="#d9d9d9")
        self.reflesh.configure(highlightcolor="black")
        self.reflesh.configure(pady="0")
        self.reflesh.configure(text='''reflesh''')

        self.SetPicPcControl = tk.Button(self.top)
        self.SetPicPcControl.place(x=1180, y=710, height=24, width=137)
        self.SetPicPcControl.configure(activebackground="#ececec")
        self.SetPicPcControl.configure(activeforeground="#000000")
        self.SetPicPcControl.configure(background="#d9d9d9")
        self.SetPicPcControl.configure(compound='left')
        self.SetPicPcControl.configure(cursor="arrow")
        self.SetPicPcControl.configure(disabledforeground="#a3a3a3")
        self.SetPicPcControl.configure(foreground="#000000")
        self.SetPicPcControl.configure(highlightbackground="#d9d9d9")
        self.SetPicPcControl.configure(highlightcolor="black")
        self.SetPicPcControl.configure(pady="0")
        self.SetPicPcControl.configure(text='''Set PIC-PC Control''')

        self.DisconnectButton = tk.Button(self.top)
        self.DisconnectButton.place(x=1180, y=740, height=24, width=70)
        self.DisconnectButton.configure(activebackground="#eb0214")
        self.DisconnectButton.configure(activeforeground="white")
        self.DisconnectButton.configure(activeforeground="#ffffff")
        self.DisconnectButton.configure(background="#eb0214")
        self.DisconnectButton.configure(compound='left')
        self.DisconnectButton.configure(cursor="arrow")
        self.DisconnectButton.configure(disabledforeground="#a3a3a3")
        self.DisconnectButton.configure(foreground="#ffffff")
        self.DisconnectButton.configure(highlightbackground="#d9d9d9")
        self.DisconnectButton.configure(highlightcolor="black")
        self.DisconnectButton.configure(pady="0")
        self.DisconnectButton.configure(text='''Disconnect''')

        self.SelectedConnect = tk.Button(self.top)
        self.SelectedConnect.place(x=1060, y=710, height=54, width=117)
        self.SelectedConnect.configure(activebackground="#ececec")
        self.SelectedConnect.configure(activeforeground="#000000")
        self.SelectedConnect.configure(background="#d9d9d9")
        self.SelectedConnect.configure(compound='left')
        self.SelectedConnect.configure(cursor="arrow")
        self.SelectedConnect.configure(disabledforeground="#a3a3a3")
        self.SelectedConnect.configure(foreground="#000000")
        self.SelectedConnect.configure(highlightbackground="#d9d9d9")
        self.SelectedConnect.configure(highlightcolor="black")
        self.SelectedConnect.configure(pady="0")
        self.SelectedConnect.configure(text='''Selected Connect''')

class SetControlPicPc:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1532x832+93+156")
        top.minsize(120, 1)
        top.maxsize(3290, 1061)
        top.resizable(0,  0)
        top.title("PIC-PC Control")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top
        self.combobox = tk.StringVar()

        self.Frame1 = tk.Frame(self.top)
        self.Frame1.place(x=10, y=10, height=95, width=895)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.VesselConnectSignal = tk.Label(self.Frame1)
        self.VesselConnectSignal.place(x=10, y=10, height=21, width=264)
        self.VesselConnectSignal.configure(activebackground="#f9f9f9")
        self.VesselConnectSignal.configure(activeforeground="black")
        self.VesselConnectSignal.configure(anchor='w')
        self.VesselConnectSignal.configure(background="#d9d9d9")
        self.VesselConnectSignal.configure(compound='left')
        self.VesselConnectSignal.configure(cursor="arrow")
        self.VesselConnectSignal.configure(disabledforeground="#a3a3a3")
        self.VesselConnectSignal.configure(foreground="#000000")
        self.VesselConnectSignal.configure(highlightbackground="#d9d9d9")
        self.VesselConnectSignal.configure(highlightcolor="black")
        self.VesselConnectSignal.configure(text='''Signal :''')

        self.Frame1 = tk.Frame(self.top)
        self.Frame1.place(x=11, y=113, height=385, width=894)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.RocketValues = tk.LabelFrame(self.Frame1)
        self.RocketValues.place(x=300, y=10, height=245, width=280)
        self.RocketValues.configure(relief='groove')
        self.RocketValues.configure(foreground="black")
        self.RocketValues.configure(text='''Rocket Value''')
        self.RocketValues.configure(background="#d9d9d9")
        self.RocketValues.configure(cursor="arrow")
        self.RocketValues.configure(highlightbackground="#d9d9d9")
        self.RocketValues.configure(highlightcolor="black")

        self.RocketMeanAltitude = tk.Label(self.RocketValues)
        self.RocketMeanAltitude.place(x=10, y=20, height=21, width=264
                , bordermode='ignore')
        self.RocketMeanAltitude.configure(activebackground="#f9f9f9")
        self.RocketMeanAltitude.configure(activeforeground="black")
        self.RocketMeanAltitude.configure(anchor='w')
        self.RocketMeanAltitude.configure(background="#d9d9d9")
        self.RocketMeanAltitude.configure(compound='left')
        self.RocketMeanAltitude.configure(disabledforeground="#a3a3a3")
        self.RocketMeanAltitude.configure(foreground="#000000")
        self.RocketMeanAltitude.configure(highlightbackground="#d9d9d9")
        self.RocketMeanAltitude.configure(highlightcolor="black")
        self.RocketMeanAltitude.configure(text='''Mean Altitude''')

        self.RocketSurfaceAltitude = tk.Label(self.RocketValues)
        self.RocketSurfaceAltitude.place(x=10, y=40, height=21, width=264
                , bordermode='ignore')
        self.RocketSurfaceAltitude.configure(activebackground="#f9f9f9")
        self.RocketSurfaceAltitude.configure(activeforeground="black")
        self.RocketSurfaceAltitude.configure(anchor='w')
        self.RocketSurfaceAltitude.configure(background="#d9d9d9")
        self.RocketSurfaceAltitude.configure(compound='left')
        self.RocketSurfaceAltitude.configure(disabledforeground="#a3a3a3")
        self.RocketSurfaceAltitude.configure(foreground="#000000")
        self.RocketSurfaceAltitude.configure(highlightbackground="#d9d9d9")
        self.RocketSurfaceAltitude.configure(highlightcolor="black")
        self.RocketSurfaceAltitude.configure(text='''Surface Altitude''')

        self.RocketBedrockAltitude = tk.Label(self.RocketValues)
        self.RocketBedrockAltitude.place(x=10, y=60, height=21, width=254
                , bordermode='ignore')
        self.RocketBedrockAltitude.configure(activebackground="#f9f9f9")
        self.RocketBedrockAltitude.configure(activeforeground="black")
        self.RocketBedrockAltitude.configure(anchor='w')
        self.RocketBedrockAltitude.configure(background="#d9d9d9")
        self.RocketBedrockAltitude.configure(compound='left')
        self.RocketBedrockAltitude.configure(disabledforeground="#a3a3a3")
        self.RocketBedrockAltitude.configure(foreground="#000000")
        self.RocketBedrockAltitude.configure(highlightbackground="#d9d9d9")
        self.RocketBedrockAltitude.configure(highlightcolor="black")
        self.RocketBedrockAltitude.configure(text='''Bedrock Altitude''')

        self.RocketVelocity = tk.Label(self.RocketValues)
        self.RocketVelocity.place(x=10, y=80, height=21, width=254
                , bordermode='ignore')
        self.RocketVelocity.configure(activebackground="#f9f9f9")
        self.RocketVelocity.configure(activeforeground="black")
        self.RocketVelocity.configure(anchor='w')
        self.RocketVelocity.configure(background="#d9d9d9")
        self.RocketVelocity.configure(compound='left')
        self.RocketVelocity.configure(disabledforeground="#a3a3a3")
        self.RocketVelocity.configure(foreground="#000000")
        self.RocketVelocity.configure(highlightbackground="#d9d9d9")
        self.RocketVelocity.configure(highlightcolor="black")
        self.RocketVelocity.configure(text='''Velocity''')

        self.RocketSpeed = tk.Label(self.RocketValues)
        self.RocketSpeed.place(x=10, y=100, height=21, width=254
                , bordermode='ignore')
        self.RocketSpeed.configure(activebackground="#f9f9f9")
        self.RocketSpeed.configure(activeforeground="black")
        self.RocketSpeed.configure(anchor='w')
        self.RocketSpeed.configure(background="#d9d9d9")
        self.RocketSpeed.configure(compound='left')
        self.RocketSpeed.configure(disabledforeground="#a3a3a3")
        self.RocketSpeed.configure(foreground="#000000")
        self.RocketSpeed.configure(highlightbackground="#d9d9d9")
        self.RocketSpeed.configure(highlightcolor="black")
        self.RocketSpeed.configure(text='''Speed''')

        self.RocketHorizontalSpeed = tk.Label(self.RocketValues)
        self.RocketHorizontalSpeed.place(x=10, y=140, height=21, width=258
                , bordermode='ignore')
        self.RocketHorizontalSpeed.configure(activebackground="#f9f9f9")
        self.RocketHorizontalSpeed.configure(activeforeground="black")
        self.RocketHorizontalSpeed.configure(anchor='w')
        self.RocketHorizontalSpeed.configure(background="#d9d9d9")
        self.RocketHorizontalSpeed.configure(compound='left')
        self.RocketHorizontalSpeed.configure(disabledforeground="#a3a3a3")
        self.RocketHorizontalSpeed.configure(foreground="#000000")
        self.RocketHorizontalSpeed.configure(highlightbackground="#d9d9d9")
        self.RocketHorizontalSpeed.configure(highlightcolor="black")
        self.RocketHorizontalSpeed.configure(text='''Horizontal_Speed''')

        self.RocketVerticalSpeed = tk.Label(self.RocketValues)
        self.RocketVerticalSpeed.place(x=10, y=120, height=21, width=254
                , bordermode='ignore')
        self.RocketVerticalSpeed.configure(activebackground="#f9f9f9")
        self.RocketVerticalSpeed.configure(activeforeground="black")
        self.RocketVerticalSpeed.configure(anchor='w')
        self.RocketVerticalSpeed.configure(background="#d9d9d9")
        self.RocketVerticalSpeed.configure(compound='left')
        self.RocketVerticalSpeed.configure(disabledforeground="#a3a3a3")
        self.RocketVerticalSpeed.configure(foreground="#000000")
        self.RocketVerticalSpeed.configure(highlightbackground="#d9d9d9")
        self.RocketVerticalSpeed.configure(highlightcolor="black")
        self.RocketVerticalSpeed.configure(text='''Vertical Speed''')

        self.RocketGForce = tk.Label(self.RocketValues)
        self.RocketGForce.place(x=10, y=160, height=21, width=254
                , bordermode='ignore')
        self.RocketGForce.configure(activebackground="#f9f9f9")
        self.RocketGForce.configure(activeforeground="black")
        self.RocketGForce.configure(anchor='w')
        self.RocketGForce.configure(background="#d9d9d9")
        self.RocketGForce.configure(compound='left')
        self.RocketGForce.configure(disabledforeground="#a3a3a3")
        self.RocketGForce.configure(foreground="#000000")
        self.RocketGForce.configure(highlightbackground="#d9d9d9")
        self.RocketGForce.configure(highlightcolor="black")
        self.RocketGForce.configure(text='''G Force''')

        self.Label2 = tk.Label(self.RocketValues)
        self.Label2.place(x=10, y=200, height=21, width=254, bordermode='ignore')

        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(anchor='w')
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(compound='left')
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Selected Rocket Value''')

        self.TCombobox1 = ttk.Combobox(self.RocketValues)
        self.TCombobox1.place(x=10, y=220, height=21, width=263
                , bordermode='ignore')
        self.TCombobox1.configure(textvariable=self.combobox)
        self.TCombobox1.configure(takefocus="")
        self.TCombobox1.configure(cursor="arrow")

        self.RocketOrbitValue = tk.LabelFrame(self.Frame1)
        self.RocketOrbitValue.place(x=10, y=10, height=245, width=290)
        self.RocketOrbitValue.configure(relief='groove')
        self.RocketOrbitValue.configure(foreground="black")
        self.RocketOrbitValue.configure(text='''Orbital Value''')
        self.RocketOrbitValue.configure(background="#d9d9d9")
        self.RocketOrbitValue.configure(cursor="arrow")
        self.RocketOrbitValue.configure(highlightbackground="#d9d9d9")
        self.RocketOrbitValue.configure(highlightcolor="black")

        self.OrbitalApsisValue = tk.Label(self.RocketOrbitValue)
        self.OrbitalApsisValue.place(x=10, y=20, height=21, width=264
                , bordermode='ignore')
        self.OrbitalApsisValue.configure(activebackground="#f9f9f9")
        self.OrbitalApsisValue.configure(activeforeground="black")
        self.OrbitalApsisValue.configure(anchor='w')
        self.OrbitalApsisValue.configure(background="#d9d9d9")
        self.OrbitalApsisValue.configure(compound='left')
        self.OrbitalApsisValue.configure(disabledforeground="#a3a3a3")
        self.OrbitalApsisValue.configure(foreground="#000000")
        self.OrbitalApsisValue.configure(highlightbackground="#d9d9d9")
        self.OrbitalApsisValue.configure(highlightcolor="black")
        self.OrbitalApsisValue.configure(text='''Apsis''')

        self.OrbitalPeapsisValue = tk.Label(self.RocketOrbitValue)
        self.OrbitalPeapsisValue.place(x=10, y=40, height=21, width=264
                , bordermode='ignore')
        self.OrbitalPeapsisValue.configure(activebackground="#f9f9f9")
        self.OrbitalPeapsisValue.configure(activeforeground="black")
        self.OrbitalPeapsisValue.configure(anchor='w')
        self.OrbitalPeapsisValue.configure(background="#d9d9d9")
        self.OrbitalPeapsisValue.configure(compound='left')
        self.OrbitalPeapsisValue.configure(disabledforeground="#a3a3a3")
        self.OrbitalPeapsisValue.configure(foreground="#000000")
        self.OrbitalPeapsisValue.configure(highlightbackground="#d9d9d9")
        self.OrbitalPeapsisValue.configure(highlightcolor="black")
        self.OrbitalPeapsisValue.configure(text='''PeApsis''')

        self.TSeparator1 = ttk.Separator(self.RocketOrbitValue)
        self.TSeparator1.place(x=12, y=64, width=0, bordermode='ignore')

        self.Lab1 = tk.Label(self.RocketOrbitValue)
        self.Lab1.place(x=10, y=70, height=11, width=64, bordermode='ignore')
        self.Lab1.configure(activebackground="#f9f9f9")
        self.Lab1.configure(activeforeground="black")
        self.Lab1.configure(anchor='w')
        self.Lab1.configure(background="#d9d9d9")
        self.Lab1.configure(compound='left')
        self.Lab1.configure(disabledforeground="#a3a3a3")
        self.Lab1.configure(foreground="#000000")
        self.Lab1.configure(highlightbackground="#d9d9d9")
        self.Lab1.configure(highlightcolor="black")
        self.Lab1.configure(text='''Altitude''')

        self.OrbitalApsisAltValue = tk.Label(self.RocketOrbitValue)
        self.OrbitalApsisAltValue.place(x=10, y=90, height=21, width=269
                , bordermode='ignore')
        self.OrbitalApsisAltValue.configure(activebackground="#f9f9f9")
        self.OrbitalApsisAltValue.configure(activeforeground="black")
        self.OrbitalApsisAltValue.configure(anchor='w')
        self.OrbitalApsisAltValue.configure(background="#d9d9d9")
        self.OrbitalApsisAltValue.configure(compound='left')
        self.OrbitalApsisAltValue.configure(disabledforeground="#a3a3a3")
        self.OrbitalApsisAltValue.configure(foreground="#000000")
        self.OrbitalApsisAltValue.configure(highlightbackground="#d9d9d9")
        self.OrbitalApsisAltValue.configure(highlightcolor="black")
        self.OrbitalApsisAltValue.configure(text='''Apoapsis Altitude''')

        self.OrbitalPeapsisAltValue = tk.Label(self.RocketOrbitValue)
        self.OrbitalPeapsisAltValue.place(x=10, y=110, height=21, width=264
                , bordermode='ignore')
        self.OrbitalPeapsisAltValue.configure(activebackground="#f9f9f9")
        self.OrbitalPeapsisAltValue.configure(activeforeground="black")
        self.OrbitalPeapsisAltValue.configure(anchor='w')
        self.OrbitalPeapsisAltValue.configure(background="#d9d9d9")
        self.OrbitalPeapsisAltValue.configure(compound='left')
        self.OrbitalPeapsisAltValue.configure(disabledforeground="#a3a3a3")
        self.OrbitalPeapsisAltValue.configure(foreground="#000000")
        self.OrbitalPeapsisAltValue.configure(highlightbackground="#d9d9d9")
        self.OrbitalPeapsisAltValue.configure(highlightcolor="black")
        self.OrbitalPeapsisAltValue.configure(text='''Periapsis Altitude''')

        self.OrbitalSpeedValue = tk.Label(self.RocketOrbitValue)
        self.OrbitalSpeedValue.place(x=10, y=130, height=21, width=264
                , bordermode='ignore')
        self.OrbitalSpeedValue.configure(activebackground="#f9f9f9")
        self.OrbitalSpeedValue.configure(activeforeground="black")
        self.OrbitalSpeedValue.configure(anchor='w')
        self.OrbitalSpeedValue.configure(background="#d9d9d9")
        self.OrbitalSpeedValue.configure(compound='left')
        self.OrbitalSpeedValue.configure(disabledforeground="#a3a3a3")
        self.OrbitalSpeedValue.configure(foreground="#000000")
        self.OrbitalSpeedValue.configure(highlightbackground="#d9d9d9")
        self.OrbitalSpeedValue.configure(highlightcolor="black")
        self.OrbitalSpeedValue.configure(text='''Orbital Speed''')

        self.OrbitalBodyName = tk.Label(self.RocketOrbitValue)
        self.OrbitalBodyName.place(x=10, y=170, height=21, width=274
                , bordermode='ignore')
        self.OrbitalBodyName.configure(activebackground="#f9f9f9")
        self.OrbitalBodyName.configure(activeforeground="black")
        self.OrbitalBodyName.configure(anchor='w')
        self.OrbitalBodyName.configure(background="#d9d9d9")
        self.OrbitalBodyName.configure(disabledforeground="#a3a3a3")
        self.OrbitalBodyName.configure(font="-family {Segoe UI} -size 8")
        self.OrbitalBodyName.configure(foreground="#000000")
        self.OrbitalBodyName.configure(highlightbackground="#f0f0f0f0f0f0")
        self.OrbitalBodyName.configure(highlightcolor="black")
        self.OrbitalBodyName.configure(text='''Body Name''')

        self.OrbitalSelectedValue = ttk.Combobox(self.RocketOrbitValue)
        self.OrbitalSelectedValue.place(x=10, y=220, height=21, width=273
                , bordermode='ignore')
        self.OrbitalSelectedValue.configure(background="#808080")
        self.OrbitalSelectedValue.configure(takefocus="")
        self.OrbitalSelectedValue.configure(cursor="arrow")

        self.OrbitalPeriodValue = tk.Label(self.RocketOrbitValue)
        self.OrbitalPeriodValue.place(x=10, y=150, height=21, width=264
                , bordermode='ignore')
        self.OrbitalPeriodValue.configure(activebackground="#f9f9f9")
        self.OrbitalPeriodValue.configure(activeforeground="black")
        self.OrbitalPeriodValue.configure(anchor='w')
        self.OrbitalPeriodValue.configure(background="#d9d9d9")
        self.OrbitalPeriodValue.configure(compound='left')
        self.OrbitalPeriodValue.configure(disabledforeground="#a3a3a3")
        self.OrbitalPeriodValue.configure(foreground="#000000")
        self.OrbitalPeriodValue.configure(highlightbackground="#d9d9d9")
        self.OrbitalPeriodValue.configure(highlightcolor="black")
        self.OrbitalPeriodValue.configure(text='''Period''')

        self.Label1 = tk.Label(self.RocketOrbitValue)
        self.Label1.place(x=10, y=200, height=21, width=274, bordermode='ignore')

        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(compound='left')
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Selected Orbital Value''')

        self.Labelframe2 = tk.LabelFrame(self.Frame1)
        self.Labelframe2.place(x=580, y=10, height=251, width=303)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(foreground="black")
        self.Labelframe2.configure(text='''Resources Value''')
        self.Labelframe2.configure(background="#d9d9d9")
        self.Labelframe2.configure(cursor="arrow")
        self.Labelframe2.configure(highlightbackground="#d9d9d9")
        self.Labelframe2.configure(highlightcolor="black")

        self.RocketResourcesValues = tk.Label(self.Labelframe2)
        self.RocketResourcesValues.place(x=7, y=16, height=216, width=275
                , bordermode='ignore')
        self.RocketResourcesValues.configure(activebackground="#f9f9f9")
        self.RocketResourcesValues.configure(activeforeground="black")
        self.RocketResourcesValues.configure(anchor='w')
        self.RocketResourcesValues.configure(background="#d9d9d9")
        self.RocketResourcesValues.configure(compound='top')
        self.RocketResourcesValues.configure(cursor="fleur")
        self.RocketResourcesValues.configure(disabledforeground="#a3a3a3")
        self.RocketResourcesValues.configure(foreground="#000000")
        self.RocketResourcesValues.configure(highlightbackground="#d9d9d9")
        self.RocketResourcesValues.configure(highlightcolor="black")
        self.RocketResourcesValues.configure(justify='left')
        self.RocketResourcesValues.configure(text='''Label''')

        self.Labelframe1 = tk.LabelFrame(self.top)
        self.Labelframe1.place(x=11, y=493, height=334, width=718)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text='''Control Consol System''')
        self.Labelframe1.configure(background="#d9d9d9")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")

        self.OutConsol = tk.Text(self.Labelframe1)
        self.OutConsol.place(x=10, y=25, height=258, width=691
                , bordermode='ignore')
        self.OutConsol.configure(background="#000000")
        self.OutConsol.configure(font="TkTextFont")
        self.OutConsol.configure(foreground="#ffffff")
        self.OutConsol.configure(highlightbackground="#d9d9d9")
        self.OutConsol.configure(highlightcolor="#000000")
        self.OutConsol.configure(insertbackground="#ffffff")
        self.OutConsol.configure(selectbackground="blue")
        self.OutConsol.configure(selectforeground="white")
        self.OutConsol.configure(wrap="word")

        self.Label1 = tk.Label(self.Labelframe1)
        self.Label1.place(x=13, y=287, height=13, width=686, bordermode='ignore')

        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(compound='left')
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Input''')

        self.InputConsol = tk.Entry(self.Labelframe1)
        self.InputConsol.place(x=11, y=303, height=20, width=684
                , bordermode='ignore')
        self.InputConsol.configure(background="white")
        self.InputConsol.configure(disabledforeground="#a3a3a3")
        self.InputConsol.configure(font="TkFixedFont")
        self.InputConsol.configure(foreground="#000000")
        self.InputConsol.configure(highlightbackground="#d9d9d9")
        self.InputConsol.configure(highlightcolor="black")
        self.InputConsol.configure(insertbackground="black")
        self.InputConsol.configure(selectbackground="blue")
        self.InputConsol.configure(selectforeground="white")

        self.Labelframe2 = tk.LabelFrame(self.top)
        self.Labelframe2.place(x=731, y=493, height=282, width=168)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(foreground="black")
        self.Labelframe2.configure(text='''Automatic Process''')
        self.Labelframe2.configure(background="#d9d9d9")
        self.Labelframe2.configure(highlightbackground="#d9d9d9")
        self.Labelframe2.configure(highlightcolor="black")

        self.Button1 = tk.Button(self.Labelframe2)
        self.Button1.place(x=10, y=20, height=44, width=47, bordermode='ignore')
        self.Button1.configure(activebackground="#ff0000")
        self.Button1.configure(activeforeground="white")
        self.Button1.configure(activeforeground="#ffffff")
        self.Button1.configure(background="#ff0000")
        self.Button1.configure(compound='left')
        self.Button1.configure(cursor="arrow")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#ffffff")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Abort''')

        self.NextActiveGrup = tk.Button(self.Labelframe2)
        self.NextActiveGrup.place(x=60, y=20, height=44, width=47
                , bordermode='ignore')
        self.NextActiveGrup.configure(activebackground="#ececec")
        self.NextActiveGrup.configure(activeforeground="#000000")
        self.NextActiveGrup.configure(background="#e6e600")
        self.NextActiveGrup.configure(compound='left')
        self.NextActiveGrup.configure(cursor="arrow")
        self.NextActiveGrup.configure(disabledforeground="#a3a3a3")
        self.NextActiveGrup.configure(foreground="#000000")
        self.NextActiveGrup.configure(highlightbackground="#d9d9d9")
        self.NextActiveGrup.configure(highlightcolor="black")
        self.NextActiveGrup.configure(pady="0")
        self.NextActiveGrup.configure(state='disabled')
        self.NextActiveGrup.configure(text='''Next''')

        self.Disconnect = tk.Button(self.Labelframe2)
        self.Disconnect.place(x=10, y=70, height=44, width=97
                , bordermode='ignore')
        self.Disconnect.configure(activebackground="#ececec")
        self.Disconnect.configure(activeforeground="#000000")
        self.Disconnect.configure(background="#eb0214")
        self.Disconnect.configure(compound='left')
        self.Disconnect.configure(cursor="arrow")
        self.Disconnect.configure(disabledforeground="#a3a3a3")
        self.Disconnect.configure(font="-family {Segoe UI Emoji} -size 8")
        self.Disconnect.configure(foreground="#ffffff")
        self.Disconnect.configure(highlightbackground="#d9d9d9")
        self.Disconnect.configure(highlightcolor="black")
        self.Disconnect.configure(pady="0")
        self.Disconnect.configure(text='''Disnconnect''')

        self.Labelframe3 = tk.LabelFrame(self.top)
        self.Labelframe3.place(x=910, y=0, height=826, width=381)
        self.Labelframe3.configure(relief='groove')
        self.Labelframe3.configure(foreground="black")
        self.Labelframe3.configure(text='''Parts''')
        self.Labelframe3.configure(background="#d9d9d9")
        self.Labelframe3.configure(highlightbackground="#d9d9d9")
        self.Labelframe3.configure(highlightcolor="black")

        self.style.configure('Treeview',  font="TkDefaultFont")
        self.Scrolledtreeview1 = ScrolledTreeView(self.Labelframe3)
        self.Scrolledtreeview1.place(x=10, y=21, height=291, width=361
                , bordermode='ignore')
        # build_treeview_support starting.
        self.Scrolledtreeview1.heading("#0",text="Rocket Parts")
        self.Scrolledtreeview1.heading("#0",anchor="center")
        self.Scrolledtreeview1.column("#0",width="196")
        self.Scrolledtreeview1.column("#0",minwidth="20")
        self.Scrolledtreeview1.column("#0",stretch="1")
        self.Scrolledtreeview1.column("#0",anchor="w")

        self.RocketSelectedPartInfo = tk.Label(self.Labelframe3)
        self.RocketSelectedPartInfo.place(x=20, y=320, height=483, width=345
                , bordermode='ignore')
        self.RocketSelectedPartInfo.configure(activebackground="#f9f9f9")
        self.RocketSelectedPartInfo.configure(activeforeground="black")
        self.RocketSelectedPartInfo.configure(anchor='w')
        self.RocketSelectedPartInfo.configure(background="#d9d9d9")
        self.RocketSelectedPartInfo.configure(compound='left')
        self.RocketSelectedPartInfo.configure(disabledforeground="#a3a3a3")
        self.RocketSelectedPartInfo.configure(font="-family {Segoe UI} -size 8")
        self.RocketSelectedPartInfo.configure(foreground="#000000")
        self.RocketSelectedPartInfo.configure(highlightbackground="#d9d9d9")
        self.RocketSelectedPartInfo.configure(highlightcolor="black")
        self.RocketSelectedPartInfo.configure(justify='left')
        self.RocketSelectedPartInfo.configure(text='''No Info''')

        self.PartInfoLoaderWidget = tk.LabelFrame(self.top)
        self.PartInfoLoaderWidget.place(x=1301, y=0, height=57, width=220)
        self.PartInfoLoaderWidget.configure(relief='groove')
        self.PartInfoLoaderWidget.configure(foreground="black")
        self.PartInfoLoaderWidget.configure(text='''Part Info Loader''')
        self.PartInfoLoaderWidget.configure(background="#d9d9d9")
        self.PartInfoLoaderWidget.configure(cursor="fleur")
        self.PartInfoLoaderWidget.configure(highlightbackground="#d9d9d9")
        self.PartInfoLoaderWidget.configure(highlightcolor="black")

        self.LoadingObject = ttk.Progressbar(self.PartInfoLoaderWidget)
        self.LoadingObject.place(x=10, y=20, width=200, height=22
                , bordermode='ignore')
        self.LoadingObject.configure(length="200")
        self.LoadingObject.configure(cursor="X_cursor")

        global _images
        _images = (

         tk.PhotoImage("img_close", data='''R0lGODlhDAAMAIQUADIyMjc3Nzk5OT09PT
                 8/P0JCQkVFRU1NTU5OTlFRUVZWVmBgYGF hYWlpaXt7e6CgoLm5ucLCwszMzNbW
                 1v//////////////////////////////////// ///////////yH5BAEKAB8ALA
                 AAAAAMAAwAAAUt4CeOZGmaA5mSyQCIwhCUSwEIxHHW+ fkxBgPiBDwshCWHQfc5
                 KkoNUtRHpYYAADs= '''),

         tk.PhotoImage("img_closeactive", data='''R0lGODlhDAAMAIQcALwuEtIzFL46
                 INY0Fdk2FsQ8IdhAI9pAIttCJNlKLtpLL9pMMMNTP cVTPdpZQOBbQd60rN+1rf
                 Czp+zLxPbMxPLX0vHY0/fY0/rm4vvx8Pvy8fzy8P//////// ///////yH5BAEK
                 AB8ALAAAAAAMAAwAAAVHYLQQZEkukWKuxEgg1EPCcilx24NcHGYWFhx P0zANBE
                 GOhhFYGSocTsax2imDOdNtiez9JszjpEg4EAaA5jlNUEASLFICEgIAOw== '''),

         tk.PhotoImage("img_closepressed", data='''R0lGODlhDAAMAIQeAJ8nD64qELE
                 rELMsEqIyG6cyG7U1HLY2HrY3HrhBKrlCK6pGM7lD LKtHM7pKNL5MNtiViNaon
                 +GqoNSyq9WzrNyyqtuzq+O0que/t+bIwubJw+vJw+vTz+zT z////////yH5BAE
                 KAB8ALAAAAAAMAAwAAAVJIMUMZEkylGKuwzgc0kPCcgl123NcHWYW Fs6Gp2mYB
                 IRgR7MIrAwVDifjWO2WwZzpxkxyfKVCpImMGAeIgQDgVLMHikmCRUpMQgA7 ''')
        )

        self.style.element_create("close", "image", "img_close",
               ("active", "pressed", "!disabled", "img_closepressed"),
               ("active", "alternate", "!disabled",
               "img_closeactive"), border=8, sticky='')

        self.style.layout("ClosetabNotebook", [("ClosetabNotebook.client",
                                     {"sticky": "nswe"})])
        self.style.layout("ClosetabNotebook.Tab", [
            ("ClosetabNotebook.tab",
              { "sticky": "nswe",
                "children": [
                    ("ClosetabNotebook.padding", {
                        "side": "top",
                        "sticky": "nswe",
                        "children": [
                            ("ClosetabNotebook.focus", {
                                "side": "top",
                                "sticky": "nswe",
                                "children": [
                                    ("ClosetabNotebook.label", {"side":
                                      "left", "sticky": ''}),
                                    ("ClosetabNotebook.close", {"side":
                                        "left", "sticky": ''}),]})]})]})])

        PNOTEBOOK = "ClosetabNotebook" 

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.PNotebook1 = ttk.Notebook(self.top)
        self.PNotebook1.place(x=1310, y=70, height=236, width=214)
        self.PNotebook1.configure(takefocus="")
        self.PNotebook1.configure(style=PNOTEBOOK)
        self.PNotebook1_t1 = tk.Frame(self.PNotebook1)
        self.PNotebook1.add(self.PNotebook1_t1, padding=3)
        self.PNotebook1.tab(0, text='''Page 1''', compound="left"
                ,underline='''-1''', )
        self.PNotebook1_t1.configure(background="#d9d9d9")
        self.PNotebook1_t1.configure(highlightbackground="#d9d9d9")
        self.PNotebook1_t1.configure(highlightcolor="black")
        self.PNotebook1_t2 = tk.Frame(self.PNotebook1)
        self.PNotebook1.add(self.PNotebook1_t2, padding=3)
        self.PNotebook1.tab(1, text='''Page 2''', compound="left"
                ,underline='''-1''', )
        self.PNotebook1_t2.configure(background="#d9d9d9")
        self.PNotebook1_t2.configure(highlightbackground="#d9d9d9")
        self.PNotebook1_t2.configure(highlightcolor="black")
        self.PNotebook1.bind('<Button-1>',_button_press)
        self.PNotebook1.bind('<ButtonRelease-1>',_button_release)
        self.PNotebook1.bind('<Motion>',_mouse_over)

class CenterConnect:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("671x433+1212+603")
        top.minsize(120, 1)
        top.maxsize(3290, 1061)
        top.resizable(0,  0)
        top.title("SunSpace - CenterConnect")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top
        self.ConIP = tk.StringVar()
        self.combobox = tk.StringVar()

        self.Labelframe1 = tk.LabelFrame(self.top)
        self.Labelframe1.place(x=10, y=50, height=377, width=656)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text='''Connect Setting''')
        self.Labelframe1.configure(background="#d9d9d9")
        self.Labelframe1.configure(cursor="arrow")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")

        self.Label1 = tk.Label(self.Labelframe1)
        self.Label1.place(x=10, y=30, height=21, width=194, bordermode='ignore')
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(compound='left')
        self.Label1.configure(cursor="arrow")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''SetConIP''')

        self.ConIP = tk.Entry(self.Labelframe1)
        self.ConIP.place(x=10, y=50, height=20, width=194, bordermode='ignore')
        self.ConIP.configure(background="white")
        self.ConIP.configure(disabledforeground="#a3a3a3")
        self.ConIP.configure(font="TkFixedFont")
        self.ConIP.configure(foreground="#000000")
        self.ConIP.configure(highlightbackground="#d9d9d9")
        self.ConIP.configure(highlightcolor="black")
        self.ConIP.configure(insertbackground="black")
        self.ConIP.configure(selectbackground="blue")
        self.ConIP.configure(selectforeground="white")
        self.tooltip_font = "TkDefaultFont"
        self.ConIP_tooltip = \
        ToolTip(self.ConIP, self.tooltip_font, '''Default : 127.0.0.1 ''')

        self.Label1 = tk.Label(self.Labelframe1)
        self.Label1.place(x=10, y=80, height=21, width=194, bordermode='ignore')
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(compound='left')
        self.Label1.configure(cursor="arrow")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''RPC Port''')

        self.RPCPort = tk.Entry(self.Labelframe1)
        self.RPCPort.place(x=10, y=100, height=20, width=194
                , bordermode='ignore')
        self.RPCPort.configure(background="white")
        self.RPCPort.configure(disabledforeground="#a3a3a3")
        self.RPCPort.configure(font="TkFixedFont")
        self.RPCPort.configure(foreground="#000000")
        self.RPCPort.configure(highlightbackground="#d9d9d9")
        self.RPCPort.configure(highlightcolor="black")
        self.RPCPort.configure(insertbackground="black")
        self.RPCPort.configure(selectbackground="blue")
        self.RPCPort.configure(selectforeground="white")
        self.RPCPort.configure(textvariable=self.ConIP)
        self.tooltip_font = "TkDefaultFont"
        self.RPCPort_tooltip = \
        ToolTip(self.RPCPort, self.tooltip_font, '''Default : 50000''')

        self.TCombobox1 = ttk.Combobox(self.Labelframe1)
        self.TCombobox1.place(x=220, y=50, height=21, width=423
                , bordermode='ignore')
        self.TCombobox1.configure(textvariable=self.combobox)
        self.TCombobox1.configure(takefocus="")
        self.TCombobox1.configure(cursor="arrow")

        self.Label1 = tk.Label(self.Labelframe1)
        self.Label1.place(x=220, y=30, height=21, width=204, bordermode='ignore')

        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(compound='left')
        self.Label1.configure(cursor="arrow")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Protocol''')

        self.Label1 = tk.Label(self.Labelframe1)
        self.Label1.place(x=10, y=130, height=21, width=194, bordermode='ignore')

        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(compound='left')
        self.Label1.configure(cursor="arrow")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Stream Port''')

        self.SPort = tk.Entry(self.Labelframe1)
        self.SPort.place(x=10, y=150, height=20, width=194, bordermode='ignore')
        self.SPort.configure(background="white")
        self.SPort.configure(disabledforeground="#a3a3a3")
        self.SPort.configure(font="TkFixedFont")
        self.SPort.configure(foreground="#000000")
        self.SPort.configure(highlightbackground="#d9d9d9")
        self.SPort.configure(highlightcolor="black")
        self.SPort.configure(insertbackground="black")
        self.SPort.configure(selectbackground="blue")
        self.SPort.configure(selectforeground="white")
        self.tooltip_font = "TkDefaultFont"
        self.SPort_tooltip = \
        ToolTip(self.SPort, self.tooltip_font, '''Default : 50001''')

        self.Labelframe1 = tk.LabelFrame(self.Labelframe1)
        self.Labelframe1.place(x=220, y=80, height=295, width=430
                , bordermode='ignore')
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text='''Active Server''')
        self.Labelframe1.configure(background="#d9d9d9")
        self.Labelframe1.configure(cursor="arrow")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")

        self.ServerStatus = tk.Label(self.Labelframe1)
        self.ServerStatus.place(x=10, y=30, height=251, width=404
                , bordermode='ignore')
        self.ServerStatus.configure(activebackground="#f9f9f9")
        self.ServerStatus.configure(activeforeground="black")
        self.ServerStatus.configure(anchor='w')
        self.ServerStatus.configure(background="#d9d9d9")
        self.ServerStatus.configure(compound='top')
        self.ServerStatus.configure(disabledforeground="#a3a3a3")
        self.ServerStatus.configure(foreground="#000000")
        self.ServerStatus.configure(highlightbackground="#d9d9d9")
        self.ServerStatus.configure(highlightcolor="black")
        self.ServerStatus.configure(justify='left')
        self.ServerStatus.configure(text='''....''')

        self.Label1 = tk.Label(self.top)
        self.Label1.place(x=10, y=10, height=21, width=574)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(compound='left')
        self.Label1.configure(cursor="arrow")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Connect Name''')

        self.ConName = tk.Entry(self.top)
        self.ConName.place(x=10, y=30, height=20, width=654)
        self.ConName.configure(background="white")
        self.ConName.configure(disabledforeground="#a3a3a3")
        self.ConName.configure(font="TkFixedFont")
        self.ConName.configure(foreground="#000000")
        self.ConName.configure(highlightbackground="#d9d9d9")
        self.ConName.configure(highlightcolor="black")
        self.ConName.configure(insertbackground="black")
        self.ConName.configure(selectbackground="blue")
        self.ConName.configure(selectforeground="white")

# The following code is add to handle mouse events with the close icons
# in PNotebooks widgets.
def _button_press(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        index = widget.index("@%d,%d" % (event.x, event.y))
        widget.state(['pressed'])
        widget._active = index

def _button_release(event):
    widget = event.widget
    if not widget.instate(['pressed']):
            return
    element = widget.identify(event.x, event.y)
    try:
        index = widget.index("@%d,%d" % (event.x, event.y))
    except TclError:
        pass
    if "close" in element and widget._active == index:
        widget.forget(index)
        widget.event_generate("<<NotebookTabClosed>>")

    widget.state(['!pressed'])
    widget._active = None

def _mouse_over(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        widget.state(['alternate'])
    else:
        widget.state(['!alternate'])

# Support code for Balloon Help (also called tooltips).
# derived from http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
from time import time, localtime, strftime
class ToolTip(tk.Toplevel):
    """ Provides a ToolTip widget for Tkinter. """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        self.wdgt = wdgt
        self.parent = self.wdgt.master
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        self.withdraw()
        self.overrideredirect(True)
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')
    def spawn(self, event=None):
        self.visible = 1
        self.after(int(self.delay * 1000), self.show)
    def show(self):
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()
    def move(self, event):
        self.lastMotion = time()
        if self.follow is False:
            self.withdraw()
            self.visible = 1
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)
    def hide(self, event=None):
        self.visible = 0
        self.withdraw()
    def update(self, msg):
        self.msgVar.set(msg)
#                   End of Class ToolTip

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    RocketControlGui_support.main()

if __name__ == '__main__':
    RocketControlGui_support.main()




